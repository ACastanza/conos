// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/clusterMatch.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// interNN
DataFrame interNN(NumericMatrix mA, NumericMatrix mB, NumericVector kA, NumericVector kB, int spaceType, float lpSpaceP, bool verbose, bool neighbourhoodAverage, NumericVector neighbourAvgKA, NumericVector neighbourAvgKB, bool mutualOnly);
RcppExport SEXP _clusterMatch_interNN(SEXP mASEXP, SEXP mBSEXP, SEXP kASEXP, SEXP kBSEXP, SEXP spaceTypeSEXP, SEXP lpSpacePSEXP, SEXP verboseSEXP, SEXP neighbourhoodAverageSEXP, SEXP neighbourAvgKASEXP, SEXP neighbourAvgKBSEXP, SEXP mutualOnlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mA(mASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mB(mBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kA(kASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kB(kBSEXP);
    Rcpp::traits::input_parameter< int >::type spaceType(spaceTypeSEXP);
    Rcpp::traits::input_parameter< float >::type lpSpaceP(lpSpacePSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type neighbourhoodAverage(neighbourhoodAverageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type neighbourAvgKA(neighbourAvgKASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type neighbourAvgKB(neighbourAvgKBSEXP);
    Rcpp::traits::input_parameter< bool >::type mutualOnly(mutualOnlySEXP);
    rcpp_result_gen = Rcpp::wrap(interNN(mA, mB, kA, kB, spaceType, lpSpaceP, verbose, neighbourhoodAverage, neighbourAvgKA, neighbourAvgKB, mutualOnly));
    return rcpp_result_gen;
END_RCPP
}
// neighbourhoodAverageMatrix
NumericMatrix neighbourhoodAverageMatrix(NumericMatrix mA, bool verbose, float lpSpaceP, int spaceType, int nThreads, int k);
RcppExport SEXP _clusterMatch_neighbourhoodAverageMatrix(SEXP mASEXP, SEXP verboseSEXP, SEXP lpSpacePSEXP, SEXP spaceTypeSEXP, SEXP nThreadsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mA(mASEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< float >::type lpSpaceP(lpSpacePSEXP);
    Rcpp::traits::input_parameter< int >::type spaceType(spaceTypeSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(neighbourhoodAverageMatrix(mA, verbose, lpSpaceP, spaceType, nThreads, k));
    return rcpp_result_gen;
END_RCPP
}
// neighbourhoodAverageMatrix2
NumericMatrix neighbourhoodAverageMatrix2(NumericMatrix mA, bool verbose, float lpSpaceP, int spaceType, int nThreads, int k);
RcppExport SEXP _clusterMatch_neighbourhoodAverageMatrix2(SEXP mASEXP, SEXP verboseSEXP, SEXP lpSpacePSEXP, SEXP spaceTypeSEXP, SEXP nThreadsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mA(mASEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< float >::type lpSpaceP(lpSpacePSEXP);
    Rcpp::traits::input_parameter< int >::type spaceType(spaceTypeSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(neighbourhoodAverageMatrix2(mA, verbose, lpSpaceP, spaceType, nThreads, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clusterMatch_interNN", (DL_FUNC) &_clusterMatch_interNN, 11},
    {"_clusterMatch_neighbourhoodAverageMatrix", (DL_FUNC) &_clusterMatch_neighbourhoodAverageMatrix, 6},
    {"_clusterMatch_neighbourhoodAverageMatrix2", (DL_FUNC) &_clusterMatch_neighbourhoodAverageMatrix2, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_clusterMatch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
